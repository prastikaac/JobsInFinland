I have a joblisting website named findjobsinfinland.fi and now in its firestore database user system is ike like : 
  inside users>EPggpmGlziSuu8ES0ngvq4srK7w1>email
"acharyaprasiddha6@gmail.com"
(string)


fullName
"qeww"
(string)


jobCategory: ["engineering", "nursing"]
jobLocation: ["espoo", "jarvenpaa"]



phoneNumber
"31424t"
(string)


uid
"EPggpmGlziSuu8ES0ngvq4srK7w1"
(string)



and jobs is like : jobs>RLdtNfVpZ9tOsXqIKB4X>createdAt
June 29, 2025 at 3:45:02 PM UTC+3
(timestamp)


description
"fsd"
(string)


imageUrl
"https://firebasestorage.googleapis.com/v0/b/findjobsinfinland-3c061.firebasestorage.app/o/jobImages%2F1751201100797_here.png?alt=media&token=49cd5382-205e-4159-b335-0808872bdf82"
(string)


jobCategory
"it-tech"
(string)


jobLocation
"helsinki"
(string)


title
"IT Manager"


make to ask for notifications at last only when user clicks login or signup





🔔 Push Notifications (Using FCM) 
I want to use Firebase Cloud Messaging (FCM) to send push notifications to the user’s browser/device.

Notifications should:

Be based on the user’s stored job category and location

Open a specific page in Chrome (especially mobile) or any default browser

the users prefePush preferences should be saved on the device (localStorage / IndexedDB) and also in Firestore under the same user ID.

 


I’ve attached an image showing my desired UI design.

I already have an HTML structure with a popup element like #popupStep1.

Please inject the UI from the image into this existing popup, without removing the ID or structure unless necessary.

Requirements:

Match the design in the image as closely as possible (layout, spacing, fonts, colors, buttons, etc.).

Make the popup clean and responsive:

On mobile, it should be compact and look natural.

On desktop, it should appear as a centered modal/popup.

I’ve also included other popup steps like #popupStep2 in the image.

Design these popups to match the UI style shown, using the correct id attributes.

Provide the CSS (and optional minimal HTML adjustments) needed to achieve this, directly usable in my existing page. and remember give css only by id


write a clear clean prompt for this, dont miss anything and further suggest me what could be the updates to this : 

here if the user is not signed in For the first time a popup will appear on the screen with a text like want to get job alerts ? and with yes no option if clicked on yes then ask for the notification permission and if notification is not allowed then show text like please enable notification otherwise we cant send you job alerts and if notification permission allowed then start to show in the popup the user will be asked his/her email only as step one and after user entered the email, checks whether a user email already exists in the Firestore database without using Firebase Authentication.

The Firestore database structure is:

pgsql
Copy
Edit
users > {user-uid like B6EP1nh6VBQBs31FEG6BYPI1ZLq1}
  - email: "sacharyaprasiddha6@gmail.com" (string)
  - name: "Pacaisii" (string)
  - phone: "Pacaisii" (string)
  - createdAt: (timestamp)
  - lastLogin: (timestamp)
  - other arrays and fields



if there is no email in the firestore database and the new email then in the step two they will be asked the other details like phone no name...  other wise in the step two they will be simply asked the password, and dont hide email in step 2 if its signin page and if they entered the password then they will get logged in and the popup will disappear and keep them logged in forever and also save the logged user data in the local storage along with the firestore database




Build a smart popup system for **non-signed-in users** that encourages job alert subscription and guides them through a smooth, validated 2-step login or signup process. The system uses **Firebase Authentication**, **Firestore**, **FCM Notifications**, and ensures persistent login and excellent UX.

---

### 📜 Full Feature Requirements

#### 🔔 Step 1: Notification Prompt

* On website load (only for users **not signed in**):

  * Show a modal popup:

    ```
    “Want to get job alerts?”
    [Yes] [No]
    ```
* If **“Yes”** is clicked:

  * Request notification permission using Firebase Cloud Messaging (FCM).
  * If **denied**:

    * Show:

      ```
      “Please enable notifications to receive job alerts.”
      ```
  * If **granted**:

    * Proceed to Step 2: Email Input.

---

#### 📩 Step 2: Email Input & User Check

* Ask the user to enter their **email address**.
* Validate:

  * Proper email format (`example@email.com`)
* Check Firebase Authentication or Firestore to see if email is already registered.

---

#### 🔐 Step 3: Conditional Flow

* If **email is already registered**:

  * Ask only for **password**.
  * Validate password input.
  * Attempt login using Firebase Auth.
  * If successful:

    * Save user info in `localStorage`.
    * Hide popup.
    * User stays logged in even after page reload (use session persistence).
  * If login fails:

    * Show error: **“Incorrect password, please try again.”**

* If **email is new (not registered)**:

  * Proceed to collect:

    * Full Name
    * Phone Number
    * Password (with minimum strength requirement)
  * Register the user using Firebase Auth (Email/Password).
  * Store the user’s data in Firestore under collection `users`.
  * Save notification token(s) linked to the user.
  * Save session in `localStorage` and keep the user logged in.
  * Hide the popup after successful registration.

---

### 🔄 Technical Details & Enhancements

#### ✅ 1. Token Expiry Handling

* Implement check and auto-refresh if Firebase session token expires.
* Use `onAuthStateChanged()` to detect current login status and auto-login.

#### ✅ 3. Validation & UX

* All fields should be validated:

  * Email → Must be in valid format.
  * Password → Min 6 characters or more.
  * Phone → Only digits, optional "+".
  * Name → Not empty.
* Use inline error messages and loading indicators for async actions.

#### ✅ 5. Session Persistence

* Use:

  ```js
  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)
  ```

  to maintain login state even after browser is closed.

#### ✅ 7. UI Enhancements

* Use animated modal/popup with step indicator:

  * Step 1 → Notifications
  * Step 2 → Email
  * Step 3 → Login or Signup
* Add smooth transitions, inline error messages, and real-time form validation.
* Optional: Add a spinner/loading icon during API calls.
* Snackbar/toast-style messages instead of alert().

---

### 📦 Data to Store in Firestore

* **Collection**: `users`
* **Fields**:

  * `email`
  * `name`
  * `phone`
  * `createdAt` (timestamp)
  * `fcmTokens` (array)
  * `lastLogin` (timestamp)

---

### 💾 localStorage Keys (Example)

```js
localStorage.setItem("userEmail", user.email);
localStorage.setItem("userID", user.uid);
localStorage.setItem("isLoggedIn", true);
```

---

### ✅ Optional: Don’t Show Popup Again

* If user closes the popup or clicks “No”, store:

  ```js
  localStorage.setItem("popupDismissed", true);
  ```

  and skip the popup on next page load (optional timeout expiration).






Trigger email + push notifications to users whose profile matches

📬 Notification System Setup

Enable browser push notifications

Store push token + preferences

Handle click event to open page in Chrome

